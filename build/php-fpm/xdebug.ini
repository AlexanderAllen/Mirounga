[XDebug]
; zend_extension="/usr/lib/php5/modules/xdebug.so"

; To see all of XDebug's confiration settings:
; - https://xdebug.org/docs/all_settings
; XDebug available functions
; - https://xdebug.org/docs/all_functions#xdebug_enable

; Required to enable the XDebug module.
zend_extension=xdebug.so

; For more XDebug configuration settings, see:
; https://xdebug.org/docs/all_settings

; For .ini syntax rules see
; http://php.net/manual/en/configuration.file.php.

; Required parameters.

; This switch controls whether Xdebug should try to contact a debug client which is listening on the host and port as
; set with the settings xdebug.remote_host and xdebug.remote_port. If a connection can not be established the script
; will just continue as if this setting was 0.
xdebug.remote_enable = ${XDEBUG_REMOTE_ENABLE}

; If enabled, the xdebug.remote_host setting is ignored and Xdebug will try to connect to the client that made the HTTP
; request. It checks the $_SERVER['REMOTE_ADDR'] variable to find out which IP address to use. Please note that there is
; no filter available, and anybody who can connect to the webserver will then be able to start a debugging session,
; even if their address does not match xdebug.remote_host.
xdebug.remote_connect_back = ${XDEBUG_CONNECT_BACK}

; Selects when a debug connection is initiated. The default value is "req", meaning that Xdebug tries to connect to the
; debug client as soon as the script starts. With "jit" Xdebug will only try to connect to the debug client as soon as
; an error condition occurs.
xdebug.remote_mode = "req"

; Selects the host where the debug client is running, you can either use a host name or an IP address. This setting is
; ignored if xdebug.remote_connect_back is enabled.
xdebug.remote_host = ${XDEBUG_REMOTE_HOST}

xdebug.remote_port = ${XDEBUG_REMOTE_PORT}
xdebug.remote_log = ${XDEBUG_REMOTE_LOG}

; Controls which IDE Key Xdebug should pass on to the DBGp debugger handler. The default is based on environment
; settings. First the environment setting DBGP_IDEKEY is consulted, then USER and as last USERNAME. The default is set
; to the first environment variable that is found.
; If this setting is set, it always overrides the environment variables.
xdebug.idekey = "${XDEBUG_IDE_KEY}"

;xdebug.remote_autostart = {{ php_xdebug_remote_autostart }}
;xdebug.profiler_enable_trigger = {{ php_xdebug_profiler_enable_trigger }}
;xdebug.profiler_output_dir = "{{ php_xdebug_profiler_output_dir }}"
;xdebug.profiler_output_name = "{{ php_xdebug_profiler_output_name }}"

; When this setting is set to on, the tracing of function calls will be enabled just before the script is run.
; This makes it possible to trace code in the auto_prepend_file.
xdebug.auto_trace = 1

xdebug.cli_color = 1

; If this setting is set to 1 then errors will always be displayed, no matter what the setting of PHP's
; display_errors is.
xdebug.force_display_errors = ${XDEBUG_FORCE_DISPLAY_ERRORS}

; This setting is a bitmask, like error_reporting.
;xdebug.force_error_reporting = {{ php_xdebug_force_error_reporting }}

;xdebug.halt_level = {{ php_xdebug_halt_level }}

; When this setting is set to 1, Xdebug will show a stack trace whenever an exception is raised - even if this exception
; is actually caught.
xdebug.show_exception_trace = ${XDEBUG_SHOW_EXCEPTION_TRACE}


; If this setting is 1, then Xdebug will disable the @ (shut-up) operator so that notices, warnings and errors are no
; longer hidden.
;
; This setting may cause an issue with Drupal when enabled...
;
; See "stat() failed in stream_wrappers.inc" in https://www.drupal.org/node/1431262.
; "The stat on line 689 is supposed to fail silently (with the error control operator / shut up operator) but
; xdebug.scream negates that....
;
xdebug.scream = 0

xdebug.show_mem_delta = 0

; This setting, defaulting to 0, controls whether Xdebug should add variable assignments to function traces.
xdebug.collect_assignments = 0

; This setting, defaulting to 1, controls whether Xdebug should write the filename used in include(), include_once(),
; require() or require_once() to the trace files.
xdebug.collect_includes = 0

; This setting, defaulting to 0, controls whether Xdebug should collect the parameters passed to functions when a
; function call is recorded in either the function trace or the stack trace.
; The setting defaults to 0 because for very large scripts it may use huge amounts of memory and therefore make
; impossible for the huge script to run.
xdebug.collect_params = 0

; If this setting is set to 0, then Xdebug will not set-up internal structures to allow code coverage. This speeds up
; Xdebug quite a bit, but of course, Code Coverage Analysis won't work.
xdebug.coverage_enable = 0

; If this setting is 1, then stacktraces will be shown by default on an error event. You can disable showing stacktraces
; from your code with xdebug_disable(). As this is one of the basic functions of Xdebug, it is advisable to leave this
; setting set to 1.
;
; NOTE: THIS SETTING MAKES DRUSH EXTREMELY NOISY!!!
; There are a lot of Exceptions that happen in Drush behind the scenes - and some of them are a feature not a bug,
; but this setting will make you think your entire site is erroring out, so you've been warned.
;
; ON THE OTHER HAND
; If your site is failing and you don't know why, you can either enable this here, or use xdebug_enable().
; - https://xdebug.org/docs/all_functions#xdebug_enable
xdebug.default_enable = ${XDEBUG_DEFAULT_ENABLE}



; http://xdebug.org/docs/develop#log_level
; XDebug log level resolution, 7 is the default, 10 the most verbose.
; 0	Criticals	Errors in the configuration
; 1	Errors	Connection errors
; 3	Warnings	Connection warnings
; 5	Communication	Protocol messages
; 7	Information	Information while connecting
; 10	Debug	Breakpoint resolving information
xdebug.log_level = 0

; http://xdebug.org/docs/develop#basic
xdebug.max_nesting_level = 1023 #

; http://xdebug.org/docs/develop#mode
; xdebug.mode = develop,debug

; http://xdebug.org/docs/develop#var_display_max_children
; xdebug.var_display_max_children = -1

; http://xdebug.org/docs/develop#var_display_max_data
; xdebug.var_display_max_data = -1

; http://xdebug.org/docs/develop#var_display_max_depths
;xdebug.var_display_max_depth = -1

; https://xdebug.org/docs/all_settings#start_upon_error
xdebug.start_upon_error="yes"
xdebug.show_error_trace = 1
