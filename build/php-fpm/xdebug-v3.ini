[XDebug]
; zend_extension="/usr/lib/php5/modules/xdebug.so"

; To see all of XDebug's confiration settings:
; - https://xdebug.org/docs/all_settings
; XDebug available functions
; - https://xdebug.org/docs/all_functions#xdebug_enable

; Required to enable the XDebug module.
zend_extension=xdebug.so

; Required parameters.

; V3 https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_enable
xdebug.mode=develop,debug,profile,trace

; V3 https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_connect_back
; Replaced by xdebug.discover_client_host.

; V2 ONLY
; If enabled, the xdebug.remote_host setting is ignored and Xdebug will try to connect to the client that made the HTTP
; request. It checks the $_SERVER['REMOTE_ADDR'] variable to find out which IP address to use. Please note that there is
; no filter available, and anybody who can connect to the webserver will then be able to start a debugging session,
; even if their address does not match xdebug.remote_host.
xdebug.remote_connect_back = ${XDEBUG_CONNECT_BACK}

; V2 https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_mode
; xdebug.remote_mode = "req"

; V3 https://xdebug.org/docs/all_settings#client_host
xdebug.client_host = ${XDEBUG_REMOTE_HOST}

; V2 https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_host
; https://2.xdebug.org/docs/remote#remote_host
; Selects the host where the debug client is running, you can either use a host name or an IP address. This setting is
; ignored if xdebug.remote_connect_back is enabled.
; xdebug.remote_host = ${XDEBUG_REMOTE_HOST}

; V2 https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_port
; xdebug.remote_port = ${XDEBUG_REMOTE_PORT}
; V3
xdebug.client_port = ${XDEBUG_REMOTE_PORT}

; https://xdebug.org/docs/all_settings#idekey
;
; Controls which IDE Key Xdebug should pass on to the DBGp debugger handler. The default is based on environment
; settings. First the environment setting DBGP_IDEKEY is consulted, then USER and as last USERNAME. The default is set
; to the first environment variable that is found.
; If this setting is set, it always overrides the environment variables.
xdebug.idekey = "${XDEBUG_IDE_KEY}"

; other settings
xdebug.cli_color = 1
xdebug.scream = 0
xdebug.force_display_errors = ${XDEBUG_FORCE_DISPLAY_ERRORS}
xdebug.show_exception_trace = ${XDEBUG_SHOW_EXCEPTION_TRACE}
xdebug.show_error_trace = 0
xdebug.show_local_vars = 0
xdebug.start_upon_error = "no"


; http://xdebug.org/docs/develop#basic
xdebug.max_nesting_level = 1023 #
xdebug.var_display_max_children = 128 #
xdebug.var_display_max_data = -1
xdebug.var_display_max_depth = 3 #

; The directory where Xdebug will write tracing, profiling, and garbage collection statistics to.
xdebug.output_dir = /tmp


; https://xdebug.org/docs/all_settings#start_with_request
;
; V3 For the req value (the original default),
; use xdebug.mode=debug with xdebug.start_with_request=trigger.
; If the original xdebug.remote_autostart behaviour is necessary,
; use xdebug.start_with_request=yes instead of trigger.
; For the jit value, use xdebug.mode=debug and xdebug.start_upon_error=yes.

; The name of the trigger is XDEBUG_TRIGGER, and Xdebug checks for its presence in either $_ENV (environment variable), $_GET or $_POST variable, or $_COOKIE (HTTP cookie name).

; There is also a legacy fallback to a functionality specific trigger name: XDEBUG_PROFILE (for Profiling), XDEBUG_TRACE (for a Function Trace), and XDEBUG_SESSION (for Step Debugging).

; Debug session management for Step Debugging is also available through XDEBUG_SESSION_START.

; With xdebug.trigger_value you can control which specific trigger value will activate the trigger. If xdebug.trigger_value is set to an empty string, any value will be accepted.
xdebug.start_with_request="trigger"

; https://xdebug.org/docs/all_settings#trigger_value
; In trigger mode, Xdebug will only start its functionality when the XDEBUG_TRIGGER is set in the environment, or when the XDEBUG_TRIGGER GET, POST, or COOKIE variable is set.
; string xdebug.trigger_value = ""
