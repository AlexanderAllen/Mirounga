version: '3.7'
networks:
  default:
    external: true
    name: ${COMPOSE_NETWORK:-localenv}
  VSD:
    external: true


# Dev stack
#
# - Drupal source code does not change with the environment.
# - Uses PHP FPM image with debugging tools enabled.
# - MUST use MOUNTED volumes instead of NAMED volumes in order to view and debug sources from host IDEs.
# - However with VSC it may be possible to avoid mounts https://code.visualstudio.com/docs/remote/containers-advanced

services:

  varnish:
    image: alexanderallen/varnish:alpine-3.12
    # Expose port 80 on the Varnish container, randomized on host.
    ports:
      - 80
    # Varnish listens on port 80, and proxies to a backend listening on 8080.
    # Use network alias for multiple backends that have the same service name on a shared netowrk.
    command: -F -s malloc,32M -a :80 -b "${PROJECT_NAME}-nginx:8080"
    # Start Varnish only after nginx has started.
    depends_on:
      - nginx

  nginx:
    image: alexanderallen/nginx:1.17-alpine
    networks:
      VSD:
        aliases:
          # Give nginx a project-specific alias: Varnish needs to know
          # which nginx service to talk to on the shared bridge network.
          - "${PROJECT_NAME}-nginx"
    tty: true
    ports:
      - 8080
      - 443
    environment:
      PROJECT_DEST: "/vsdroot"
    volumes:
      - "${PROJECT_SOURCE}:/vsdroot"
      - drawer:/sock

      # Main config.
      # - ../../build/nginx/etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      # Virtual host.
      - ../../build/nginx/etc/nginx/conf.d/vhost.conf:/etc/nginx/conf.d/default.conf
      # NJS script.
      # - ../../build/nginx/etc/nginx/http.js:/etc/nginx/http.js


  # Per-project php-fpm container.
  # Each project gets it's own socket with visibiilty into the project's files.
  #
  # PHP-FPM DOES NOT NEED A NETWORK ALIAS THANKS TO SOCKETS !!!
  #
  # Nginx+PHP-FPM do not communicate via network names, instead they use a socket -
  # a virtual volume specific to each project, creating a unique per-project 1-to-1 relationship.
  # This is because volumes are namespaced per-project, and Docker Compose knows how to access that namespace.
  php-fpm:

    # https://stackoverflow.com/a/42510314/467453
    logging:
      driver: "json-file"
      options:
        max-size: "100k"
        max-file: "1"

    volumes:
      - "${PROJECT_SOURCE}:/vsdroot"
      - drawer:/sock

      # For live settings development.
      - ../../build/php-fpm/conf.d/xdebug-v3.ini:/etc/php7/conf.d/20-xdebug.ini

    # Allow nobody user logging to /dev/stdout.
    tty: true

    # The prod image is not setup for xdebug, use the dev image.
    image: "alexanderallen/php7-fpm.dev:alpine-3.11"
    environment:
      # Currently ignored, hardcoded in
      # build\php-fpm\php-fpm.d\docker-pool.conf
      PHP_FPM_LISTEN: /sock/docker.sock

      PHP_INI_MAX_EXECUTION_TIME: 0 # Set to 0 for unlimited.
      PHP_INI_MEM_LIMIT: 256M # The default memory limit is 128M.
      # PHP_FPM_LISTEN: 127.0.0.1:9010 # The default port is 9000, which conflicts with XDebug. Move to 9010.
      PHP_FPM_WORKER_LOGOUTPUT: 1

      PHP_FPM_SLOWLOG_TIMEOUT: 0
      # Use environment variables to speed up FPM optimization cycles.
      PHP_FPM_PM_MANAGER: dynamic
      PHP_FPM_CHILDREN_MAX: 15
      # Default Value: min_spare_servers + (max_spare_servers - min_spare_servers) / 2
      PHP_FPM_CHILDREN_START: 7
      PHP_FPM_CHILDREN_SPARE_MIN: 5
      PHP_FPM_CHILDREN_SPARE_MAX: 10

      # Location of the Windows Subsystem for Linux Host.
      XDEBUG_REMOTE_HOST: ${XDEBUG_REMOTE_HOST}

      # Set to /dev/stdout to log remote connection logs to Docker.
      # Note: XDebug v2 is very noisy!
      XDEBUG_REMOTE_LOG: /tmp/xdebug-remote.log

      XDEBUG_REMOTE_PORT: 9000
      XDEBUG_IDE_KEY: 'PHPSTORM'

      # ; This switch controls whether Xdebug should try to contact a debug client which is listening on the host and port as
      # ; set with the settings xdebug.remote_host and xdebug.remote_port
      XDEBUG_REMOTE_ENABLE: 1

      # If this setting is 1, then stacktraces will be shown by default on an error event.
      # It will also make xdebug logs extremely noisey and print caught exceptions as well.
      XDEBUG_DEFAULT_ENABLE: 0

      # If this setting is set to 1 then errors will always be displayed, no matter what the setting of PHP's
      # ; display_errors is.
      XDEBUG_FORCE_DISPLAY_ERRORS: 1

      # ; When this setting is set to 1, Xdebug will show a stack trace whenever an exception is raised - even if this exception
      # ; is actually caught.
      XDEBUG_SHOW_EXCEPTION_TRACE: 0


volumes:
  drawer:
